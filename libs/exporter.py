"""
Excel export utilities.
"""

import pandas as pd


def create_documentation_dataframe():
    """
    Create documentation DataFrame for Excel export.

    Returns
    -------
    pd.DataFrame
        Documentation content as DataFrame
    """
    doc_data = []

    # Header
    doc_data.append(['SimplePPA - Power Purchase Agreement Analysis Tool', '', ''])
    doc_data.append(['Documentation & User Manual', '', ''])
    doc_data.append(['', '', ''])

    # Overview
    doc_data.append(['OVERVIEW', '', ''])
    doc_data.append(['SimplePPA helps energy buyers evaluate the economic impact of different PPA coverage levels', '', ''])
    doc_data.append(['by simulating hourly energy flows and calculating total costs over a full year (8,760 hours).', '', ''])
    doc_data.append(['', '', ''])

    # Key Terminology
    doc_data.append(['KEY TERMINOLOGY', '', ''])
    doc_data.append(['Term', 'Definition', 'Unit'])
    doc_data.append(['PPA (Power Purchase Agreement)', 'Contract to buy electricity from solar farm at fixed price', ''])
    doc_data.append(['Load', 'Your electricity demand/consumption', 'kWh'])
    doc_data.append(['PPA Coverage', 'Solar farm capacity relative to your peak load (100% = equal size)', '%'])
    doc_data.append(['ESS', 'Energy Storage System (battery) to store excess solar energy', 'kWh'])
    doc_data.append(['Minimum Take', 'Percentage of solar generation you must purchase each hour', '%'])
    doc_data.append(['Optional Purchase', 'Additional solar energy you can buy if cheaper than grid', 'kWh'])
    doc_data.append(['Resale', 'Ability to sell excess solar energy back to grid', ''])
    doc_data.append(['Resale Rate', 'Price received when reselling (typically 90% of PPA price)', '%'])
    doc_data.append(['PPA Cost', 'Payment for solar energy purchased', 'KRW'])
    doc_data.append(['Grid Energy Cost', 'Payment for electricity from grid based on kWh consumed', 'KRW'])
    doc_data.append(['Contract Fee', 'Grid demand charge based on peak kW demand (from KEPCO contract sheet)', 'KRW'])
    doc_data.append(['ESS Cost', 'Operating cost for discharging stored energy', 'KRW'])
    doc_data.append(['', '', ''])

    # Column Definitions - Annual Summary
    doc_data.append(['ANNUAL SUMMARY SHEET - COLUMN DEFINITIONS', '', ''])
    doc_data.append(['Column Name', 'Unit', 'Description'])
    doc_data.append(['PPA_Coverage', '%', 'PPA solar farm capacity as % of your peak load'])
    doc_data.append(['Annual_PPA_Gen', 'kWh', 'Total solar energy generated by PPA farm'])
    doc_data.append(['Annual_Mandatory_PPA', 'kWh', 'Energy that MUST be purchased per contract (minimum take)'])
    doc_data.append(['Annual_Optional_PPA', 'kWh', 'Additional energy purchased because it\'s cheaper than grid'])
    doc_data.append(['Annual_PPA_Purchase', 'kWh', 'Total energy purchased from PPA (Mandatory + Optional)'])
    doc_data.append(['Annual_PPA_Cost', 'KRW', 'Total cost for PPA purchases (minus resale revenue if applicable)'])
    doc_data.append(['Annual_Grid_Purchase', 'kWh', 'Energy purchased from grid to meet remaining demand'])
    doc_data.append(['Annual_Grid_Cost', 'KRW', 'Total grid cost (energy charges + contract fee)'])
    doc_data.append(['Annual_PPA_Excess', 'kWh', 'Excess PPA energy (stored in ESS, resold, or wasted)'])
    doc_data.append(['Annual_Resell_Revenue', 'KRW', 'Revenue from reselling excess PPA energy back to grid'])
    doc_data.append(['Annual_Total_Cost', 'KRW', 'Total annual electricity cost (PPA + Grid + ESS)'])
    doc_data.append(['Load_Coverage', '%', 'Percentage of your load demand met by PPA purchases'])
    doc_data.append(['PPA_Cost', 'KRW/kWh', 'PPA cost per unit of total load demand'])
    doc_data.append(['Grid_Cost', 'KRW/kWh', 'Grid cost per unit of total load demand'])
    doc_data.append(['Total_Cost', 'KRW/kWh', 'Total cost per unit of total load demand'])
    doc_data.append(['', '', ''])

    # Column Definitions - Cost Analysis
    doc_data.append(['COST ANALYSIS SHEET - COLUMN DEFINITIONS', '', ''])
    doc_data.append(['Column Name', 'Unit', 'Description'])
    doc_data.append(['PPA_Coverage', '%', 'PPA sizing as % of peak load'])
    doc_data.append(['Total_Cost', 'KRW', 'Total annual cost for all electricity'])
    doc_data.append(['PPA_Cost', 'KRW', 'Cost for PPA purchases (net of resale)'])
    doc_data.append(['Grid_Energy_Cost', 'KRW', 'Grid energy charges only (excludes contract fee)'])
    doc_data.append(['Contract_Fee', 'KRW', 'Grid demand charge based on peak kW demand'])
    doc_data.append(['ESS_Cost', 'KRW', 'Cost for ESS discharge operations'])
    doc_data.append(['Total_Cost', 'KRW/kWh', 'Total cost divided by annual load demand'])
    doc_data.append(['PPA_Cost', 'KRW/kWh', 'PPA cost divided by annual load demand'])
    doc_data.append(['Grid_Energy_Cost', 'KRW/kWh', 'Grid energy cost divided by annual load demand'])
    doc_data.append(['Contract_Fee', 'KRW/kWh', 'Contract fee divided by annual load demand'])
    doc_data.append(['ESS_Cost', 'KRW/kWh', 'ESS cost divided by annual load demand'])
    doc_data.append(['', '', ''])

    # Algorithm Overview
    doc_data.append(['ALGORITHM OVERVIEW', '', ''])
    doc_data.append(['SimplePPA simulates hourly energy procurement for entire year. For each hour:', '', ''])
    doc_data.append(['', '', ''])
    doc_data.append(['Step 1: Scale Patterns to Actual Capacity', '', ''])
    doc_data.append(['  Load (kWh) = Normalized Load × Load Capacity (MW) × 1000', '', ''])
    doc_data.append(['  PPA Generation (kWh) = Normalized Solar × Load Capacity × PPA Coverage × 1000', '', ''])
    doc_data.append(['', '', ''])
    doc_data.append(['Step 2: PPA Purchase Decision', '', ''])
    doc_data.append(['  Mandatory Purchase = PPA Generation × Minimum Take % (MUST buy)', '', ''])
    doc_data.append(['  Optional Purchase = Buy additional if PPA price < grid rate AND you need energy', '', ''])
    doc_data.append(['  Total PPA Purchase = Mandatory + Optional', '', ''])
    doc_data.append(['  PPA Cost = Total Purchase × PPA Price', '', ''])
    doc_data.append(['', '', ''])
    doc_data.append(['Step 3: Energy Balance', '', ''])
    doc_data.append(['  If excess PPA energy:', '', ''])
    doc_data.append(['    - Try to store in ESS (if available and not full)', '', ''])
    doc_data.append(['    - Try to resell to grid (if enabled) at PPA Price × Resale Rate', '', ''])
    doc_data.append(['    - Otherwise, excess is wasted (but already paid for)', '', ''])
    doc_data.append(['  If energy deficit:', '', ''])
    doc_data.append(['    - Discharge from ESS (if available) at cost = PPA Price × ESS Discharge Price', '', ''])
    doc_data.append(['    - Buy remaining from grid at hourly grid rate', '', ''])
    doc_data.append(['    - Track peak grid demand for contract fee calculation', '', ''])
    doc_data.append(['', '', ''])
    doc_data.append(['Step 4: Calculate Contract Fee', '', ''])
    doc_data.append(['  After all hours, find peak grid demand (kW)', '', ''])
    doc_data.append(['  Contract Fee = Peak Grid Demand (kW) × Contract Fee Rate (KRW/kW)', '', ''])
    doc_data.append(['', '', ''])
    doc_data.append(['Step 5: Total Cost', '', ''])
    doc_data.append(['  Total Cost = PPA Cost + Grid Energy Cost + Contract Fee + ESS Cost', '', ''])
    doc_data.append(['', '', ''])

    # Input Data Requirements
    doc_data.append(['INPUT DATA REQUIREMENTS', '', ''])
    doc_data.append(['pattern.xlsx (required columns):', '', ''])
    doc_data.append(['  - load: Normalized hourly load (0-1 scale, where 1 = peak load)', '', ''])
    doc_data.append(['  - solar: Normalized hourly solar generation (0-1 scale, where 1 = peak)', '', ''])
    doc_data.append(['  - emission: Grid emission factor (kgCO2e/kWh) - carbon intensity', '', ''])
    doc_data.append(['  - Must have 8,760 rows (one year, hourly)', '', ''])
    doc_data.append(['', '', ''])
    doc_data.append(['KEPCO.xlsx (required sheets):', '', ''])
    doc_data.append(['  - timezone: Peak/off-peak hours by month', '', ''])
    doc_data.append(['  - season: Month to season mapping', '', ''])
    doc_data.append(['  - contract: Contract fees (KRW/kW) for each tariff type', '', ''])
    doc_data.append(['  - HV_C_I, HV_C_II, HV_C_III: Energy rates by season and timezone', '', ''])
    doc_data.append(['', '', ''])
    doc_data.append(['EMISSIONS:', '', ''])
    doc_data.append(['  - Emission factor represents carbon intensity of grid electricity (kgCO2e/kWh)', '', ''])
    doc_data.append(['  - PPA solar energy assumed to be zero-emission (configurable)', '', ''])
    doc_data.append(['  - Tool calculates total emissions and emissions per kWh for each scenario', '', ''])
    doc_data.append(['  - Results show environmental benefits of PPA adoption', '', ''])
    doc_data.append(['', '', ''])

    # Version
    doc_data.append(['VERSION', '', ''])
    doc_data.append(['SimplePPA v0.2', '', ''])

    return pd.DataFrame(doc_data, columns=['Section', 'Details', 'Notes'])


def export_to_excel(filename, long_df, annual_summary_df, cost_comparison_df):
    """
    Export analysis results to Excel file.

    Parameters
    ----------
    filename : str
        Output filename
    long_df : pd.DataFrame
        Long-format analysis data
    annual_summary_df : pd.DataFrame
        Annual summary data
    cost_comparison_df : pd.DataFrame
        Cost comparison data

    Returns
    -------
    None
    """
    with pd.ExcelWriter(filename, engine='openpyxl') as writer:
        # First sheet: Documentation
        doc_df = create_documentation_dataframe()
        doc_df.to_excel(writer, sheet_name='Documentation', index=False, header=False)

        # Primary output: Long-format data for pivot analysis
        long_df.to_excel(writer, sheet_name='PPA_Analysis_Data', index=False)

        # Annual summary
        annual_summary_df.to_excel(writer, sheet_name='Annual_Summary', index=False)

        # Cost analysis
        cost_comparison_df.to_excel(writer, sheet_name='Cost_Analysis', index=False)


def export_to_excel_bytes(long_df, annual_summary_df, cost_comparison_df):
    """
    Create an Excel workbook in-memory and return it as bytes.

    Parameters
    ----------
    long_df : pd.DataFrame
        Long-format analysis data
    annual_summary_df : pd.DataFrame
        Annual summary data
    cost_comparison_df : pd.DataFrame
        Cost comparison data

    Returns
    -------
    bytes
        Excel file contents as bytes suitable for Streamlit download
    """
    from io import BytesIO

    output = BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        # First sheet: Documentation
        doc_df = create_documentation_dataframe()
        doc_df.to_excel(writer, sheet_name='Documentation', index=False, header=False)

        # Primary output: Long-format data for pivot analysis
        long_df.to_excel(writer, sheet_name='PPA_Analysis_Data', index=False)

        # Annual summary
        annual_summary_df.to_excel(writer, sheet_name='Annual_Summary', index=False)

        # Cost analysis
        cost_comparison_df.to_excel(writer, sheet_name='Cost_Analysis', index=False)

    output.seek(0)
    return output.getvalue()


def print_analysis_summary(config, analysis_df, results_summary, optimal_ppa, optimal_cost,
                          results_ess=None, optimal_ess_ppa=None, optimal_ess_cost=None,
                          ess_capacity_kwh=None, peak_solar_mw=None):
    """
    Print comprehensive analysis summary to console.

    Parameters
    ----------
    config : dict
        Configuration dictionary
    analysis_df : pd.DataFrame
        Analysis DataFrame
    results_summary : list
        Results without ESS
    optimal_ppa : int
        Optimal PPA percentage without ESS
    optimal_cost : float
        Optimal cost without ESS
    results_ess : list, optional
        Results with ESS
    optimal_ess_ppa : int, optional
        Optimal PPA percentage with ESS
    optimal_ess_cost : float, optional
        Optimal cost with ESS
    ess_capacity_kwh : float, optional
        ESS capacity in kWh
    peak_solar_mw : float, optional
        Peak solar in MW

    Returns
    -------
    None
    """
    # Basic analysis info
    print(f"\n=== ANALYSIS SUMMARY ===")
    print(f"Analysis period: {config['start_date']} to {config['end_date']} ({len(analysis_df)/24:.1f} days)")
    print(f"Load capacity: {config['load_capacity_mw']} MW")
    print(f"Total load: {(analysis_df['load_mw'].sum() * 1000):,.0f} kWh")
    print(f"Average Grid rate: {analysis_df['grid_rate'].mean():.1f} KRW/kWh")
    print(f"Grid rate range: {analysis_df['grid_rate'].min():.1f} - {analysis_df['grid_rate'].max():.1f} KRW/kWh")
    print(f"PPA price: {config['ppa_price']} KRW/kWh")
    print(f"Average savings per kWh: {analysis_df['grid_rate'].mean() - config['ppa_price']:.1f} KRW/kWh")

    # Optimal results
    print(f"\n=== OPTIMAL RESULTS ===")
    print(f"No ESS  - Optimal: {optimal_ppa}% PPA, Cost: {optimal_cost:,.0f} KRW")

    if results_ess is not None:
        print(f"With ESS - Optimal: {optimal_ess_ppa}% PPA, Cost: {optimal_ess_cost:,.0f} KRW")
        print(f"ESS Capacity: {ess_capacity_kwh:.1f} kWh ({config['ess_capacity']*100:.0f}% of peak solar {peak_solar_mw:.1f} MW)")
        print(f"ESS benefit: {optimal_cost - optimal_ess_cost:,.0f} KRW savings")
    else:
        print(f"With ESS - Analysis skipped (ESS disabled)")

    # Configuration summary
    print(f"\n=== CONFIGURATION ===")
    print(f"ESS included: {config['ess_include']}")
    print(f"Resell enabled: {config['ppa_resell']}, Resell rate: {config['ppa_resellrate']}")
    print(f"Minimum take: {config['ppa_mintake']*100:.0f}%")
    print(f"PPA coverage range: {config['ppa_range_start']}% to {config['ppa_range_end']}% (step: {config['ppa_range_step']}%)")


def print_results_table(results_summary, title="PPA Coverage Analysis"):
    """
    Print results table to console.

    Parameters
    ----------
    results_summary : list
        List of result dictionaries
    title : str, optional
        Table title

    Returns
    -------
    None
    """
    print(f"\n=== {title} ===")
    print("PPA% | Total Cost/kWh | PPA Cost/kWh | Grid Energy/kWh | Contract Fee/kWh | ESS Cost/kWh")
    print("-" * 90)

    for result in results_summary:
        print(f"{result['ppa_percent']:3d}% | "
              f"{result['total_cost_per_kwh']:14.2f} | "
              f"{result['ppa_cost_per_kwh']:12.2f} | "
              f"{result['grid_energy_cost_per_kwh']:15.2f} | "
              f"{result['grid_demand_cost_per_kwh']:16.2f} | "
              f"{result['ess_cost_per_kwh']:12.2f}")


def print_peak_analysis(peak_analysis, ppa_price):
    """
    Print peak hour analysis.

    Parameters
    ----------
    peak_analysis : dict
        Peak analysis results
    ppa_price : float
        PPA price

    Returns
    -------
    None
    """
    print(f"\n=== PEAK HOUR ANALYSIS ===")
    print(f"Peak hours {peak_analysis['peak_hours']}: Avg Grid rate = {peak_analysis['peak_avg_rate']:.1f} KRW/kWh")
    print(f"Off-peak hours {peak_analysis['offpeak_hours']}: Avg Grid rate = {peak_analysis['offpeak_avg_rate']:.1f} KRW/kWh")
    print(f"Peak hour savings with PPA: {peak_analysis['peak_avg_rate'] - ppa_price:.1f} KRW/kWh")
